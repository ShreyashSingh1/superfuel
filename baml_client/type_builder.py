###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import typing
from baml_py.baml_py import FieldType, EnumValueBuilder, EnumBuilder, ClassBuilder
from baml_py.type_builder import TypeBuilder as _TypeBuilder, ClassPropertyBuilder, ClassPropertyViewer, EnumValueViewer
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


class TypeBuilder(_TypeBuilder):
    def __init__(self):
        super().__init__(classes=set(
          ["AgentInput","AgentOutput","AgentPlannerInput","AgentPlannerOutput","AgentWithToolsInput","AgentWithToolsOutput","Resume","ToolCall",]
        ), enums=set(
          []
        ), runtime=DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME)


    @property
    def AgentInput(self) -> "AgentInputAst":
        return AgentInputAst(self)

    @property
    def AgentOutput(self) -> "AgentOutputAst":
        return AgentOutputAst(self)

    @property
    def AgentPlannerInput(self) -> "AgentPlannerInputAst":
        return AgentPlannerInputAst(self)

    @property
    def AgentPlannerOutput(self) -> "AgentPlannerOutputAst":
        return AgentPlannerOutputAst(self)

    @property
    def AgentWithToolsInput(self) -> "AgentWithToolsInputAst":
        return AgentWithToolsInputAst(self)

    @property
    def AgentWithToolsOutput(self) -> "AgentWithToolsOutputAst":
        return AgentWithToolsOutputAst(self)

    @property
    def Resume(self) -> "ResumeAst":
        return ResumeAst(self)

    @property
    def ToolCall(self) -> "ToolCallAst":
        return ToolCallAst(self)





class AgentInputAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("AgentInput")
        self._properties: typing.Set[str] = set([ "query", ])
        self._props = AgentInputProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "AgentInputProperties":
        return self._props


class AgentInputViewer(AgentInputAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class AgentInputProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def query(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("query"))

    

class AgentOutputAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("AgentOutput")
        self._properties: typing.Set[str] = set([ "response",  "action", ])
        self._props = AgentOutputProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "AgentOutputProperties":
        return self._props


class AgentOutputViewer(AgentOutputAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class AgentOutputProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def response(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("response"))

    @property
    def action(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("action"))

    

class AgentPlannerInputAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("AgentPlannerInput")
        self._properties: typing.Set[str] = set([ "paragraph",  "available_tools", ])
        self._props = AgentPlannerInputProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "AgentPlannerInputProperties":
        return self._props


class AgentPlannerInputViewer(AgentPlannerInputAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class AgentPlannerInputProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def paragraph(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("paragraph"))

    @property
    def available_tools(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("available_tools"))

    

class AgentPlannerOutputAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("AgentPlannerOutput")
        self._properties: typing.Set[str] = set([ "plan_description",  "tool_calls", ])
        self._props = AgentPlannerOutputProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "AgentPlannerOutputProperties":
        return self._props


class AgentPlannerOutputViewer(AgentPlannerOutputAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class AgentPlannerOutputProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def plan_description(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("plan_description"))

    @property
    def tool_calls(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("tool_calls"))

    

class AgentWithToolsInputAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("AgentWithToolsInput")
        self._properties: typing.Set[str] = set([ "query",  "available_tools", ])
        self._props = AgentWithToolsInputProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "AgentWithToolsInputProperties":
        return self._props


class AgentWithToolsInputViewer(AgentWithToolsInputAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class AgentWithToolsInputProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def query(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("query"))

    @property
    def available_tools(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("available_tools"))

    

class AgentWithToolsOutputAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("AgentWithToolsOutput")
        self._properties: typing.Set[str] = set([ "response",  "tool_to_use",  "tool_parameters", ])
        self._props = AgentWithToolsOutputProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "AgentWithToolsOutputProperties":
        return self._props


class AgentWithToolsOutputViewer(AgentWithToolsOutputAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class AgentWithToolsOutputProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def response(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("response"))

    @property
    def tool_to_use(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("tool_to_use"))

    @property
    def tool_parameters(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("tool_parameters"))

    

class ResumeAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Resume")
        self._properties: typing.Set[str] = set([ "name",  "email",  "experience",  "skills", ])
        self._props = ResumeProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ResumeProperties":
        return self._props


class ResumeViewer(ResumeAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ResumeProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def name(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("name"))

    @property
    def email(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("email"))

    @property
    def experience(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("experience"))

    @property
    def skills(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("skills"))

    

class ToolCallAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("ToolCall")
        self._properties: typing.Set[str] = set([ "tool_name",  "parameters",  "purpose", ])
        self._props = ToolCallProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ToolCallProperties":
        return self._props


class ToolCallViewer(ToolCallAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ToolCallProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def tool_name(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("tool_name"))

    @property
    def parameters(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("parameters"))

    @property
    def purpose(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("purpose"))

    




__all__ = ["TypeBuilder"]